}
simulated_standings <- simulate_standings()
library(dplyr)
simulated_standings2 <- # your simulated standings data
last_round_standing <- simulated_standings %>%
group_by(team, simulation_id) %>%
filter(matched_played == max(matched_played)) %>%
summarise(max_point = max(point)) %>%
group_by(team) %>%
summarise(avg_max_point = mean(max_point))
simulated_standings2$avg_max_point <- round(simulated_standings2$avg_max_point)
table(last_round_standing$team, last_round_standing$standing)
View(simulated_standings2)
pl <- fread("C:/Users/ohagg/OneDrive - University College London/Desktop/Github/Premier_league predictor/epl-2022-UTC_nto.csv")
knitr::kable(pl)
library(dplyr)
View(simulated_standings2)
library(tidyverse)
df_students <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-07/student_teacher_ratio.csv")
head(df_students)
df_world_tile <- readr::read_csv("https://gist.githubusercontent.com/maartenzam/787498bbc07ae06b637447dbd430ea0a/raw/9a9dafafb44d8990f85243a9c7ca349acd3a0d07/worldtilegrid.csv") %>%
mutate(
## Namibias two-digit country code is handled as `NA` - let us fix that
alpha.2 = if_else(name == "Namibia", "NA", alpha.2),
## We are going to split "Americas" into "North America" and "Sout America"
region = if_else(region == "Americas", sub.region, region),
region = if_else(region %in% c("Northern America", "Central America", "Caribbean"),
"North America", region),
region = if_else(region == "Southern America", "South America", region),
## to join both data sets, we need a id column
country_code = alpha.3
)
head(df_world_tile)
df_ratios <- df_students %>%
## Let's keep only the most recent data per country
group_by(country, indicator) %>%
filter(year == max(year)) %>%
ungroup() %>%
# Create `NA`s for countries which do not have any data 2012-2018
complete(indicator, nesting(country, country_code)) %>%
## Let's focus on primary education and keep only countries (coded by letters)
filter(
indicator == "Primary Education",
str_detect(country_code, "[A-Z]")
) %>%
## merge with world tile map data
full_join(df_world_tile) %>%
filter(
!is.na(region),
!is.na(indicator)
) %>%
group_by(region) %>%
mutate(student_ratio_region = median(student_ratio, na.rm = T)) %>%
ungroup()
head(df_ratios)
#New data.frame with only data needed for analysis
df_ratio2 <- df_ratios %>%
select(c("indicator", "country", "region","student_ratio", "student_ratio_region"))
table(df_ratio2)
head(df_ratio2)
#Removed the rows which contain NA
ratios_3 <- na.omit(df_ratio2)
df_group <- df_ratio2 %>%
group_by(region)
df_group
#Initial box plot of data
ggplot(ratios_3, aes(x = region, y = student_ratio)) +
geom_boxplot()
#Arrange the box plots in ascending to descending order
df_sorted <-
ratios_3 %>%
mutate(region = fct_reorder(region, student_ratio_region))
#Wrong order so rearrange to correct order
df_sorted2 <-
ratios_3 %>%
mutate(region = fct_reorder(region, -student_ratio_region))
ggplot(df_sorted2,mapping = aes(x=region,y=student_ratio))+ geom_boxplot()
#Violin plot
ggplot(df_sorted2,mapping = aes(x=region,y=student_ratio))+ geom_violin()
#Switch x and y axis
ggplot(df_sorted2,mapping = aes(x=student_ratio,y=region))+ geom_violin()
#Changed the x axis length and expand axis
ggplot(df_sorted2,mapping = aes(x=student_ratio,y=region))+ geom_violin() + scale_x_continuous(limits = c(0,90),expand = c(0.02, 0.02))
ggplot(df_sorted2,mapping = aes(x=student_ratio,y=region,color = region))+ geom_violin() + scale_x_continuous(limits = c(0,90),expand = c(0.02, 0.02))
#Set theme of the graph
theme_set(theme_light(base_size = 18, base_family = "Poppins"))
#Sort out the variables of the graphs
g <-
ggplot(df_sorted2, aes(x = student_ratio, y = region, color = region)) +
scale_x_continuous(limits = c(0, 90), expand = c(0.02, 0.02)) +
labs(y = NULL, x = "Student to teacher ratio") +
theme(
legend.position = "none",
axis.title = element_text(size = 16),
axis.text.x = element_text(family = "Roboto Mono", size = 12),
panel.grid = element_blank()
)
#Point of the graph
g+geom_point(size = 3,alpha = 0.2)
#Change to jitter to showcase more points
g + geom_jitter(size = 3, alpha = 0.25,height = 0.25)+stat_summary(fun = mean, geom = "point", size = 5)
#Get a world average to compare for the different continents
world_avg <-
df_sorted2 %>%
summarize(avg = mean(student_ratio, na.rm = TRUE)) %>%
pull(avg)
#Add text labels to the graph
g_text <- g + geom_jitter(size = 4, alpha = 0.25,height = 0.2)+
stat_summary(fun = mean, geom = "point", size = 5)+
geom_vline(aes(xintercept=world_avg, colour="grey"))+
geom_segment(
aes(y = region, yend = region,
x = world_avg, xend = student_ratio_region),
size = 0.8)+
annotate(
"text", x = 35, y = 6.3, family = "Poppins", size = 3, color = "gray20", lineheight = .9,
label = glue::glue("Worldwide average:\n{round(world_avg, 1)} students per teacher")
) +
annotate(
"text", x = 10, y = 3.5, family = "Poppins", size = 3, color = "gray20",
label = "Continental average"
) +
annotate(
"text", x = 11, y = 1.7, family = "Poppins", size = 3, color = "gray20",
label = "Countries per continent"
)
#Set arrows
arrows <-
tibble(
y1 = c(6.1, 3.62, 1.8, 1.8),
y2 = c(5.6, 4, 2.1, 2.76),
x1 = c(world_avg + 6, 10.5, 9, 9),
x2 = c(world_avg + 0.1, 18.4, 14.16, 12)
)
#Plot arrows
g_arrows <-
g_text +
geom_curve(
data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
color = "gray20", curvature = -0.3
)
library(tidyverse)
df_students <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-07/student_teacher_ratio.csv")
head(df_students)
df_world_tile <- readr::read_csv("https://gist.githubusercontent.com/maartenzam/787498bbc07ae06b637447dbd430ea0a/raw/9a9dafafb44d8990f85243a9c7ca349acd3a0d07/worldtilegrid.csv") %>%
mutate(
## Namibias two-digit country code is handled as `NA` - let us fix that
alpha.2 = if_else(name == "Namibia", "NA", alpha.2),
## We are going to split "Americas" into "North America" and "Sout America"
region = if_else(region == "Americas", sub.region, region),
region = if_else(region %in% c("Northern America", "Central America", "Caribbean"),
"North America", region),
region = if_else(region == "Southern America", "South America", region),
## to join both data sets, we need a id column
country_code = alpha.3
)
library(data.table)
library(ggplot2)
library(stringr)
library(lubridate)
library(dplyr)
df_students <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-07/student_teacher_ratio.csv")
head(df_students)
df_world_tile <- readr::read_csv("https://gist.githubusercontent.com/maartenzam/787498bbc07ae06b637447dbd430ea0a/raw/9a9dafafb44d8990f85243a9c7ca349acd3a0d07/worldtilegrid.csv") %>%
mutate(
## Namibias two-digit country code is handled as `NA` - let us fix that
alpha.2 = if_else(name == "Namibia", "NA", alpha.2),
## We are going to split "Americas" into "North America" and "Sout America"
region = if_else(region == "Americas", sub.region, region),
region = if_else(region %in% c("Northern America", "Central America", "Caribbean"),
"North America", region),
region = if_else(region == "Southern America", "South America", region),
## to join both data sets, we need a id column
country_code = alpha.3
)
head(df_world_tile)
df_ratios <- df_students %>%
## Let's keep only the most recent data per country
group_by(country, indicator) %>%
filter(year == max(year)) %>%
ungroup() %>%
# Create `NA`s for countries which do not have any data 2012-2018
complete(indicator, nesting(country, country_code)) %>%
## Let's focus on primary education and keep only countries (coded by letters)
filter(
indicator == "Primary Education",
str_detect(country_code, "[A-Z]")
) %>%
## merge with world tile map data
full_join(df_world_tile) %>%
filter(
!is.na(region),
!is.na(indicator)
) %>%
group_by(region) %>%
mutate(student_ratio_region = median(student_ratio, na.rm = T)) %>%
ungroup()
head(df_ratios)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(cli)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library("cli")
installed.packages()
installed.packages("cli")
?`cli-package
``
?`cli-package`
# libraries we need
libs <- c(
"elevatr", "rayshader", "tidyverse", "sf", "giscoR", "jsonlite",
"httr", "png"
)
# install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == F)) {
install.packages(libs[!installed_libs])
}
# load libraries
invisible(lapply(libs, library, character.only = T))
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_country_sf <- function(country_sf, country_transformed) {
country_sf <- giscoR::gisco_get_countries(
year = "2016", epsg = "4326",
resolution = "10", country = "Japan"
)
country_transformed <- st_transform(country_sf, crs = crsLONGLAT)
return(country_transformed)
}
japan_transformed <- get_country_sf()
get_elevation_data <- function(country_elevation, country_elevation_df) {
country_elevation <- get_elev_raster(
locations = japan_transformed,
z = 7, clip = "locations"
)
elevation_mat <- raster_to_matrix(country_elevation)
return(elevation_mat)
}
japan_dem <- get_elevation_data()
h <- 537
w <- 1552
bb <- st_bbox(japan_transformed)
type <- "World_Imagery"
file <- NULL
height <- h * 6
width <- w * 6
crs_bb <- 4326
get_satellite_img <- function(url, params, res) {
url <- parse_url("https://utility.arcgisonline.com/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task/execute")
# define query
params <- list(
baseMap = list(baseMapLayers = list(list(url = unbox("https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer")))),
exportOptions = list(outputSize = c(width, height)), mapOptions = list(extent = list(
spatialReference = list(wkid = unbox(crs_bb)),
xmin = unbox(bb["xmin"]), ymin = unbox(bb["ymin"]), xmax = unbox(bb["xmax"]),
ymax = unbox(bb["ymax"])
))
)
res <- GET(url, query = list(
f = "json", Format = "PNG32", Layout_Template = "MAP_ONLY",
Web_Map_as_JSON = toJSON(params)
))
return(res)
}
res <- get_satellite_img()
write_map_png <- function(res_body, img_res, img_bin, file) {
res_body <- content(res, type = "application/json")
img_res <- GET(res_body$results[[1]]$value$url)
img_bin <- content(img_res, "raw")
file <- paste0(getwd(), "/japan_image.png")
writeBin(img_bin, file)
}
write_map_png()
get_map_png <- function(img_file, japan_img) {
img_file <- "japan_image.png"
japan_img <- readPNG(img_file)
return(japan_img)
}
japan_img <- get_map_png()
#############################################
# Making a realistic 3D topographic map in R
# Milos Popovic 2022/05/24
#############################################
setwd("C:/Users/ohagg/OneDrive - University College London/Desktop/Github/Country_coverage/top") # please set path to your working directory
write_map_png <- function(res_body, img_res, img_bin, file) {
res_body <- content(res, type = "application/json")
img_res <- GET(res_body$results[[1]]$value$url)
img_bin <- content(img_res, "raw")
file <- paste0(getwd(), "/japan_image.png")
writeBin(img_bin, file)
}
write_map_png()
get_map_png <- function(img_file, japan_img) {
img_file <- "japan_image.png"
japan_img <- readPNG(img_file)
return(japan_img)
}
japan_img <- get_map_png()
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 15, fov = 0, theta = 0, zoom = 0.55, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 75,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 15, fov = 0, theta = 105, zoom = 0.55, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 15, fov = 0, theta = 35, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 15, fov = 0, theta = 35, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 10,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 15, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 40, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
min(japan_img)
max(japan_img)
max(japan_dem)
min(japan_dem)
View(japan_dem)
View(japan_transformed)
min(japan_transformed$geometry)
max(japan_transformed$geometry)
?sphere_shade
?plot_3d
japan_dem %>%
sphere_shade(texture = "desert") %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black", hillshade = 1
)
japan_dem %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black", hillshade = 0.5
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
add_overlay(japan_img, alphalayer = 0.99) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
add_overlay(japan_img, alphalayer = 0.99) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, solid = F,
solidcolor = "white", solidlinecolor = "white",
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
?add_overlay()
japan_dem %>%
sphere_shade(texture = "desert") %>%
add_overlay(height_shade(japan_img), alphalayer = 0.99) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
rayshader::render_camera(zoom = .6, phi = 85, theta = 0)
rayshader::render_camera(zoom = .3, phi = 85, theta = 0)
rayshader::render_camera(zoom = .9, phi = 85, theta = 0)
rayshader::render_camera(zoom = .9, phi = 30, theta = 0)
?add_overlay
japan_dem %>%
sphere_shade(texture = "desert") %>%
add_overlay(japan_img, alphalayer = 0.99, rescale_original = T) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
add_overlay(japan_img, alphalayer = 0.99, overlay = japan_img) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
japan_dem %>%
sphere_shade(texture = "desert") %>%
add_overlay(japan_img, alphalayer = 0.99) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "black"
)
?sphere_shade
japan_dem %>%
sphere_shade(texture = "imhof1") %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "white"
)
japan_dem %>%
sphere_shade(texture = "imhof1") %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "white"
)
japan_dem %>%
sphere_shade(texture = "imhof1", colorintensity = 5) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 0, shadowwidth = 0,
windowsize = c(w, h), background = "white"
)
japan_dem %>%
sphere_shade(texture = "imhof1", colorintensity = 8) %>%
plot_3d(japan_dem,
zscale = 5, fov = 0, theta = 5, zoom = 0.7, solid = F,
solidcolor = "white", solidlinecolor = "white", phi = 45,
shadow_darkness = 0, shadowdepth = 3, shadowwidth = 0,
windowsize = c(w, h), background = "white"
)
render_highquality(
filename = "japan_dem_test2.png", lightintensity = 800,
lightaltitude = 90, title_text = "Topography of Japan\n©2023 Oliver Hagger www.oliverhagger.com",
title_font = "Georgia", title_color = "grey20", title_size = 100, title_offset = c(
360,
180
), width = w * 3, height = h * 3
)
rgl::close3d()
gc()
